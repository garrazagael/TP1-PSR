openapi: "3.0.3"
info:
  title: "TP1"
  version: "1.0.0"
servers: 
  - url:  "http://localhost:4260"

components:
  schemas:
    producto:
      type: "object"
      properties: 
        id:  
          type: "number"
          example: 1

        nombre:
          type: "string"
          example: "Jabon"

        precioXfecha:
          type: "array"
          items:
            $ref: "#/components/schemas/registroPrecioxFecha"


    registroPrecioxFecha:
      type: "object"
      properties:
        precio:
          type: "number"
          example: 469
        fecha:
          type: "string"
          example: "25-03-2018"

paths:
  "/":
    get:
      summary: "ANDA LA API"
      description: "Devuelve un mensaje que dice: Anda la API, ya estamos cerca de la liberación."
      responses: 
        200:
          description: "Literalmente anda todo."

  "/productos":
    get:
      summary: "Devuelve los productos existentes."
      description: "Devuelve un array con todos los productos registrados."
      responses: 
        200:
          description: "Un array con todos los productos."
          content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/producto"
    post:
      summary: Inserta la info de un nuevo Producto
      requestBody:
        description: Crear Producto
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "number"
                  example: 47
                nombre:
                  type: "string"
                  example: "Toalla de tela"
                precioXfecha:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/registroPrecioxFecha"
        required: true
      responses:
        200:
          description: El producto fue creado correctamente.
        400:
          description: ERROR FATAL

  "/productos/{id}":
    get:
      summary: "Devuelve información de un producto específico."
      description: "Devuelve toda la información del producto buscado."
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "number"
          required: true
          description: "El ID del producto que hay que buscar."
      responses:
        200:
          description: "Los datos del producto con el ID especificado."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/producto"
        404:
          description: "No hay producto con el ID especificado."
          content:
            application/json:
              schema:
                type: "string"
                example: { err: "No existe un producto con el ID ingesado" }

    put:
      summary: "Cambiar información de producto"
      description: "Modifica los datos de un producto en específico. Todos los campos son requeridos."
      parameters:
        - in : "path"
          name: "id"
          schema:
              type: "number"
          required: true
          description: "El ID del producto a modificar."

      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                nombre:
                  type: "string"
                  example: "Producto epico"
      responses:
        404:
          description: "No hay producto con el nombre especificado."
          content:
            application/json:
              schema:
                type: "string"
                example: { err: "No existe un producto con el nombres ingesado" }

        400:
          description: "Alguno de los parámetros es incorrecto o está faltante."
          content:
            application/json:
              schema:
                type: "string"
                example: { err: "Parámetros inválidos o no ingresados." }

        200:
          description: "El producto fue modificado con éxito."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  producto:
                    $ref: "#/components/schemas/producto"
    delete:
      summary: "Borrar el producto"
      description: "Borra los datos de un producto en específico. Todos los campos son requeridos."
      parameters:
        - in: "path"
          name: "id"
          schema:
              type: "number"
          required: true
          description: "El ID del producto a borrar."

      responses:
        404:
          description: "No hay producto con el ID especificado."
          content:
            application/json:
              schema:
                type: "string"
                example: { err: "No existe un producto con el nombres ingesado" }

        400:
          description: "Alguno de los parámetros es incorrecto o está faltante."
          content:
            application/json:
              schema:
                type: "string"
                example: { err: "Parámetros inválidos o no ingresados." }

        200:
          description: "El producto fue borrado con éxito."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  producto:
                    $ref: "#/components/schemas/producto"                
    

  "/productos/{nombre}":
    get:
      summary: "Devuelve información de un producto específico."
      description: "Devuelve toda la información del producto buscado."
      parameters:
        - in: "path"
          name: "nombre"
          schema:
            type: "string"
          required: true
          description: "El nombre del producto que hay que buscar."
      responses:
        200:
          description: "Los datos del producto con el nombre especificado."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/producto"
        404:
          description: "No hay producto con el nombre especificado."
          content:
            application/json:
              schema:
                type: "string"
                example: { err: "No existe un producto con el nombres ingesado" }